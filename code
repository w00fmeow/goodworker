import { hashHistory } from 'react-router'
import { message } from 'antd'
import { loginByTicket, staff, login as loginApi, getBtns } from '@apis/common'

export function parseQueryString(url) {
  const obj = {}
  if (url.indexOf('?') !== -1) {
    const str = url.split('?')[1]
    const strs = str.split('&')
    strs.map((item, i) => {
      const arr = strs[i].split('=')
      /* eslint-disable */
      obj[arr[0]] = arr[1]
    })
  }
  return obj
}

const _fetchLoginByTicket = async ticket => new Promise((resolve) => {
  loginByTicket({ ticket }, (response) => {
    resolve(response.data)
  }, (response) => {
    const obj = parseQueryString(window.location.href)
    console.log(obj)
    if (obj.ticket || obj.mode) {
    } else {
      hashHistory.replace('/login')
    }
  })
})

const _fetchStaff = () => new Promise((resolve) => {
  staff({}, (res) => {
    const { data } = res
    sessionStorage.setItem('userinfo', JSON.stringify(data))
    resolve()
  })
})

/* eslint-disable no-use-before-define */
export const isHasCurrentMenu = (allMenu, pathname) => compare(allMenu, pathname)
/* eslint-enable no-use-before-define */


const _fetchNav = pathname => new Promise((resolve) => {
  // try {
  //   if (JSON.parse(sessionStorage.getItem('menu')).length > 0) {
  //     resolve()
  //     return
  //   }
  // } catch (e) { e }
  nav({}, (response) => {
    const { list } = response.data
    if (list.length === 0) {
      hashHistory.replace('/login')
      // this.setState({ loading: false })
      return
    }
    sessionStorage.setItem('menu', JSON.stringify(list))
    resolve()
  })
})

export const validateTickit = async function validateTickit({ query, pathname }, callback) {
  const { ticket } = query
  if (ticket) {
    const loginInfo = await _fetchLoginByTicket(ticket)
    sessionStorage.setItem('token', loginInfo.token)
    // sessionStorage.setItem('isLeftNavMini', false)
  } else {
    _fetchStaff()
    _fetchNav(callback)
    */
  }

  const _a = _fetchStaff()
  const _b = _fetchNav(pathname)
  await _a
  await _b
  if (typeof callback === 'function') callback()
}
/* -----------------------------------------------------------------------------*/

function compare(children, pathname) {
  for (let i = 0; i < children.length; i += 1) {
    const item = children[i]
    /* eslint-disable no-useless-escape */
    const _resKey = `${item.resKey.replace(/[\$\.\?\+\^\[\]\(\)\{\}\|\\\/]/g, '\\$&').replace(/\*\*/g, '[\\w|\\W]+').replace(/\*/g, '[^\\/]+')}$`
    /* eslint-enable no-useless-escape */
    if (new RegExp(_resKey).test(pathname)) {
      sessionStorage.setItem('menuId', item.id)
      return true
    } else if (item.children) {
      if (compare(item.children, pathname)) return true
    }
  }
  return false
}
